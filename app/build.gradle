apply plugin: 'com.android.application'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.google.firebase.appdistribution'
apply plugin: "com.github.triplet.play"
apply from: "../scripts/versions.gradle"
apply from: "../scripts/secrets.gradle"

android {
    compileSdkVersion rootProject.compileSdkVersion
    defaultConfig {
        applicationId rootProject.applicationId
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode computeVersionCode()
        versionName computeVersionName()
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    signingConfigs {
      ci {
          storeFile file("develop_key.jks")
          storePassword System.env.CI_KEYSTORE_PASS ?: ""
          keyAlias System.env.CI_KEYSTORE_KEY_ALIAS ?: ""
          keyPassword System.env.CI_KEYSTORE_KEY_PASS ?: ""
      }
    }
    buildTypes {
        debug {
            applicationIdSuffix '.debug'
            versionNameSuffix '-debug'
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug

            versionNameSuffix '-market'
            applicationIdSuffix '.market'
        }
        releaseGithub {
            initWith buildTypes.release
            matchingFallbacks = ['release']

            applicationIdSuffix '.github'
            versionNameSuffix '-github'
        }
        develop {
            signingConfig signingConfigs.ci
            matchingFallbacks = ['debug']
            versionNameSuffix '-develop'
            applicationIdSuffix '.dev'
            //Init firebase
            def localReleaseNotes = releaseNotes()
            def localFirebaseGroup = firebaseGroup()
            firebaseAppDistribution {
              releaseNotes = localReleaseNotes
              groups = localFirebaseGroup
            }
        }
    }

    sourceSets {
        releaseGithub {
            res.srcDirs = ['src/release/res']
        }
    }

    bundle {
        language {
            enableSplit = false
        }
    }

    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }

    kotlinOptions {
        freeCompilerArgs = ["-Xallow-result-return-type"]

        jvmTarget = '1.8'
    }
}

task bindReleaseGithubGoogleServicesToRelease(type: Copy) {
    description = 'Switches to RELEASE google-services.json'
    from "src/release"
    include "google-services.json"
    into "src/releaseGithub"
}

afterEvaluate {
    processReleaseGithubGoogleServices.dependsOn bindReleaseGithubGoogleServicesToRelease
}

play {
    serviceAccountCredentials = file(System.env.CI_PLAY_KEY ?: "../key/fake.json")
    track = "beta"
    releaseStatus = "completed"
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(':core-db')
    implementation project(':common')
    implementation project(':feature-splash')

    implementation project(':feature-onboarding-api')
    implementation project(':feature-onboarding-impl')

    implementation project(':feature-account-api')
    implementation project(':feature-account-impl')

    implementation project(':feature-wallet-api')
    implementation project(':feature-wallet-impl')

    implementation project(':runtime')

    implementation project(':feature-staking-api')
    implementation project(':feature-staking-impl')

    implementation project(':feature-crowdloan-api')
    implementation project(':feature-crowdloan-impl')

    implementation project(':feature-dapp-api')
    implementation project(':feature-dapp-impl')

    implementation kotlinDep

    implementation androidDep
    implementation constraintDep

    implementation zXingEmbeddedDep

    implementation navigationFragmentDep
    implementation navigationUiDep

    implementation roomDep

    implementation fearlessLibDep

    implementation daggerDep
    kapt daggerKapt

    implementation lifecycleDep
    kapt lifecycleKapt

    implementation lifeCycleKtxDep

    implementation retrofitDep
    implementation gsonConvertedDep

    implementation gifDep

    compileOnly wsDep

    implementation coroutinesDep

    testImplementation project(':test-shared')

    implementation insetterDep

    implementation liveDataKtxDep

    kaptAndroidTest daggerKapt

    androidTestImplementation androidTestRunnerDep
    androidTestImplementation androidTestRulesDep
    androidTestImplementation androidJunitDep
}

task printVersion {
  doLast {
    println "versionName:${computeVersionName()}"
  }
}
